package com.peng.spm.extention.agent;

import java.io.File;
import java.io.IOException;
import java.lang.instrument.Instrumentation;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;

import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtField;
import javassist.CtMethod;
import javassist.Loader;
import javassist.NotFoundException;

public class Agent {

	private static final String CUSTOM_DIR_PATH = "./wwwroot/silkroot/custom";
	public static File dir;
	public static File contentFile;
	public static File logFile;
	
	private static boolean isInstrumented = false;
	
	public static void agentmain(String args, Instrumentation instr) {
		Agent.log("[INFO] execute agentmain()...");
		premain(args, instr);
	}
	
	public static void premain(String args, Instrumentation instr) {
		
		createFiles();
		Agent.log("[INFO] Load SPM Extention Agent");
		
		instr.addTransformer(new SnapshotViewTransformer());

	}
	
//	private static void adjustHealthHistoryView(ClassPool pool) {
//		
//		Agent.log("[INFO] Start Instrumenting HealthHistoryView...");
//		
//		try {
//			CtClass healthHistoryView = pool.get("com.segue.vision.webgui.module.units.reporting.projectList.HealthHistoryView");
//			  //private static String[] sWidths = { "15%", "52%", "16%", "17%" };
//			
//			//------------------------
//			// Create Field
//			//------------------------
//			CtClass stringClass = pool.get("java.lang.String");
//			
//			//------------------------
//			// Change sWidths Field
//			//------------------------
//			CtField widthsField = healthHistoryView.getDeclaredField("sWidths");
//			//widthsField.
//			healthHistoryView.
//			healthHistoryView.toClass();
//			
//		} catch (NotFoundException | CannotCompileException e) {
//			Agent.log("[ERROR] "+e.getClass().getSimpleName()+" - "
//								+e.getMessage()+"\n"+e.getStackTrace());
//		}
//		
//		Agent.log("[INFO] End Instrumenting HealthHistoryView...");
//	}
	
	private static void createFiles() {
		
		try {
			
			//------------------------
			// Create Directory
			//------------------------
			dir = new File(CUSTOM_DIR_PATH);
			
			if(!dir.exists() && !dir.isDirectory()) {
				dir.mkdir();
			}
			
			//------------------------
			// Logfile
			//------------------------
			logFile = new File(CUSTOM_DIR_PATH+"/agent.log");
				
			if(!logFile.exists()) {
				logFile.createNewFile();
			}
			
			//------------------------
			// Create content
			//------------------------
			contentFile = new File(CUSTOM_DIR_PATH+"/content.html");
			
			if(!contentFile.exists()) {
				
				Agent.log("[INFO] Create custom.html...");
				
				contentFile.createNewFile();
				Agent.writeToFile(contentFile, "<html><body><p>Replace this content.</p></body></html>");
			}
			
		}catch(Exception e) {
			Agent.log("[ERROR] Agent.createFile()", e);
		}
			
	}
	
	public static String readFromFile(File file) {
		Agent.log("[INFO] Read File: "+ file.getAbsolutePath());
		
		Path path = Paths.get(file.getPath());
		
		List<String> fileContent = null;
		try {
			fileContent = Files.readAllLines(path);
		} catch (Exception e) {
			Agent.log("[ERROR] Agent.readFromFile()", e);
		}
		
		StringBuffer result = new StringBuffer("");
		for(String line : fileContent) {
			result.append(line+"\n");
		}
		
		return result.toString();
		
	}
	private static void writeToFile(File file, String content) {
		Path path = Paths.get(file.getPath());
		
		try {
			Files.write(path, content.getBytes(), StandardOpenOption.APPEND);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void log(String message) {
		System.out.println(message);
		Agent.writeToFile(logFile, "\n"+message);
	}
	
	public static void log(String message, Throwable e) {
		
		StringBuffer errorBuffer = new StringBuffer(e.toString());
		
		for(StackTraceElement s : e.getStackTrace()) {
			errorBuffer.append("\n"+s.toString());
		}
		
		message += errorBuffer.toString();
		
		Agent.log(message);
	}

	public static void toggleInstrumented(boolean b) {
		isInstrumented = b;
		
	}
}
