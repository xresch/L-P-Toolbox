//###############################################################
//
// commons.bhd
// -----------
// This file contains common useful functions for browser driven
// load test scripts.
//
// Author: Reto Scheiwiller, 2017
// Licence: MIT License
// 
//###############################################################

use "Kernel.bdh"
use "BrowserAPI.bdh"

dclfunc
  
  //================================================================
  // Click the element if it could be found, else do nothing.
  //================================================================
  function ClickIfVisible(locator : string; actionName : string)  
    var
      handleList : list of number;
      elementsFound : boolean;
    begin
      elementsFound := BrowserFindAll(HANDLE_DESKTOP, locator, handleList);
  
      //handle := BrowserFind(HANDLE_DESKTOP, locator, FALSE, BROWSER_OPT_WAIT_TIMEOUT, TRUE);
      if(elementsFound) then
        BrowserClick(locator, BUTTON_Left, actionName);
      end;
      
    end ClickIfVisible;
  
  //================================================================
  // Get the count of elements found with the specified locator.
  //================================================================
  function GetElementCount(locator : string): number
    var
      handleList : list of number;
      elementsFound : boolean;
    begin
      elementsFound := BrowserFindAll(HANDLE_DESKTOP, locator, handleList);
  
      //DEBUG: writeln("NumberOfListElements:" + elementsFound + ", "+ ListGetLength(handleList));
      GetElementCount := ListGetLength(handleList);
      
    end GetElementCount; 
    
  //================================================================
  // Log a line with timestamp and the values you have defined 
  // separated with comma.
  // 
  // Example:
  //   2017-07-17T07:07:07, [logType], LogName, logMessage
  //   2017-07-17T07:07:07, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_11-20, 2.675000ms
  //================================================================
  function Log(logType : string; 
               logName : string; 
               logMessage : string)  
    var 
       logLine : string;
       formattedDate : string;
    begin

      FormatDateTime(GetCurrentDate(), GetCurrentTime(), "%Y-%m-%dT%H:%M:%S", formattedDate);

      logLine := logLine + formattedDate;
      logLine := logLine + ", " + "[" + logType + "]"; 
      logLine := logLine + ", " + logName;  
      logLine := logLine + ", " + logMessage;   
      
      writeln(logLine);
    end;
    
  //================================================================
  // Logs the duration for the specified count.
  // This will consider the number of items found by the locator and
  // appends an exponential range to the actionName.
  // This will be shown in the report as an action of it's own.
  // 
  // - actionName: The name of the action which the duration should 
  //               be taken from. (e.g. "Click_MenuItem_HugeList")
  //
  // - countName:  The name for the count, you can do multiple counts
  //               on the same action. (e.g. "rowCount")
  //
  // - locator:    The locator of the elements which should be 
  //               counted. (e.g. "//tr")
  //
  // - initRange:  The initial range of the exponential ranges.
  //               (e.g '5' will result in "1-5", "6-10", "11-20" ...)
  //
  // Output Example:
  //   2017-07-17T07:07:07, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_11-20, 2.675000ms
  //   2017-07-17T08:08:08, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_1-5, 0.777000ms
  //   2017-07-17T09:09:09, [ITEMCOUNT], Click_MenuItem_HugeList_rowCount_6-10, 0.999000ms
  //   ...
  //
  //================================================================
  function LogDurationByCount(actionName : string; 
                        countName : string; 
                        locator : string; 
                        initRange : number )
    var
      logName : string;
      lowerBound : number;
      upperBound : number;
      count : number;
      duration : float;
    begin
      lowerBound := 1;
      upperBound := initRange;
      logName := actionName + "_" + countName;
      count := GetElementCount(locator);
      
      MeasureGet(actionName, MEASURE_PAGE_ACTIONTIME, MEASURE_KIND_LAST, duration);

      
      if(count = 0) then
        logName := logName + "_0";
      
      else
        
        while(lowerBound < count) do
          lowerBound := upperBound + 1;
          upperBound := upperBound * 2;
        
        end;
        
        logName := logName + "_"+ string(lowerBound) + "-" + string(upperBound);
      
      end;
      
      Log("ITEMCOUNT", logName, string(duration));
      
    end LogDurationByCount; 
    
  
  //================================================================
  // Enables percentile calculation for page actions.
  //================================================================
  function EnablePercentilesForActions
    begin
      MeasureCalculateRawPercentiles(NULL, MEASURE_PAGE_ACTIONTIME);
    end EnablePercentilesForActions;
 
  
  //================================================================
  // Adds a measure the specified action with an item count.
  // This will consider the number of items found by the locator and
  // appends an exponential range to the actionName.
  // This will be shown in the report as an action of it's own.
  // 
  // - actionName: The name of the action which the duration should 
  //               be taken from. (e.g. "Click_MenuItem_HugeList")
  //
  // - countName:  The name for the count, you can do multiple counts
  //               on the same action. (e.g. "rowCount")
  //
  // - locator:    The locator of the elements which should be 
  //               counted. (e.g. "//tr")
  //
  // - initRange:  The initial range of the exponential ranges.
  //               (e.g '5' will result in "1-5", "6-10", "11-20" ...)
  //
  // Action Name Examples:
  //   Click_MenuItem_HugeList_rowCount_11-20
  //   Click_MenuItem_HugeList_rowCount_1-5
  //   Click_MenuItem_HugeList_rowCount_6-10
  //
  //================================================================
    function MeasureTimeByLocatorCount(actionName : string; 
                        countName : string; 
                        locator : string; 
                        initRange : number )
    var
      logName : string;
      lowerBound : number;
      upperBound : number;
      count : number;
      duration : float;
    begin
      lowerBound := 1;
      upperBound := initRange;
      logName := actionName + "_" + countName;
      count := GetElementCount(locator);
      
      MeasureGet(actionName, MEASURE_PAGE_ACTIONTIME, MEASURE_KIND_LAST, duration);

      
      if(count = 0) then
        logName := logName + "_0";
      
      else
        
        while(lowerBound < count) do
          lowerBound := upperBound + 1;
          upperBound := upperBound * 2;
        
        end;
        
        logName := logName + "_"+ string(lowerBound) + "-" + string(upperBound);
      
      end;
      
      MeasureSetFloat(logName, MEASURE_PAGE_ACTIONTIME, duration * 1000.0);
      
    end MeasureTimeByLocatorCount; 
    
    //================================================================
  // Adds a measure the specified action with an item count.
  // This will take the count set by the parameter and
  // appends an exponential range to the actionName.
  // This will be shown in the report as an action of it's own.
  // 
  // - actionName: The name of the action which the duration should 
  //               be taken from. (e.g. "Click_MenuItem_HugeList")
  //
  // - countName:  The name for the count, you can do multiple counts
  //               on the same action. (e.g. "rowCount")
  //
  // - count:      The count that should be saved
  //
  // - initRange:  The initial range of the exponential ranges.
  //               (e.g '5' will result in "1-5", "6-10", "11-20" ...)
  //
  // Action Name Examples:
  //   Click_MenuItem_HugeList_rowCount_11-20
  //   Click_MenuItem_HugeList_rowCount_1-5
  //   Click_MenuItem_HugeList_rowCount_6-10
  //
  //================================================================
    function MeasureTimeByCount(actionName : string; 
                        countName : string; 
                        count : number; 
                        initRange : number )
    var
      logName : string;
      lowerBound : number;
      upperBound : number;
      duration : float;
    begin
      lowerBound := 1;
      upperBound := initRange;
      logName := actionName + "_" + countName;
      
      MeasureGet(actionName, MEASURE_PAGE_ACTIONTIME, MEASURE_KIND_LAST, duration);

      
      if(count = 0) then
        logName := logName + "_0";
      
      else
        
        while(lowerBound < count) do
          lowerBound := upperBound + 1;
          upperBound := upperBound * 2;
        
        end;
        
        logName := logName + "_"+ string(lowerBound) + "-" + string(upperBound);
      
      end;
      
      MeasureSetFloat(logName, MEASURE_PAGE_ACTIONTIME, duration * 1000.0);
      
    end MeasureTimeByCount; 